{"version":3,"sources":["Context/ColorContext.tsx","utils/isColor.tsx","components/styledComponents/Button.tsx","components/styledComponents/Input.tsx","components/styledComponents/Item.tsx","components/common/ReactTransitionFade.tsx","components/ColorListForm.tsx","components/ColorListItem.tsx","components/ColorList.tsx","Context/ThemeContext.tsx","components/Header.tsx","components/App.tsx","index.tsx"],"names":["uuidv4","require","TYPES","reducer","state","action","type","map","obj","color","payload","copied","id","newState","splice","initialState","ColorContext","React","createContext","isColor","strColor","s","Option","style","Button","styled","button","props","theme","primary","Input","input","Item","div","ReactTransitionFade","children","transitionName","transitionEnterTimeout","transitionLeaveTimeout","ShowColor","ShowColorLarge","readableColor","SliderWrapper","Form","form","ColorListForm","useContext","dispatch","useState","setColor","isDuplicatedColor","setDuplicatedColor","handleColorChange","colorT","hex","onChange","onChangeComplete","onSubmit","e","preventDefault","filter","checkColor","length","value","event","target","ColorItem","ColorListWrapper","ColorListItem","slice","reverse","onClick","navigator","clipboard","writeText","getColor","key","role","Wrapper","ColorList","dark","ThemeContext","Header","handleChange","checked","setChecked","useEffect","currentTheme","localStorage","getItem","className","href","rel","htmlFor","setItem","GlobalStyle","createGlobalStyle","darkTheme","lightTheme","App","whiteColor","ReactDOM","render","useReducer","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0f05de8d.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\nconst uuidv4 = require('uuid/v4');\n\nexport const TYPES = {\n  ADD_COLOR: 'ADD_COLOR',\n  UPDATE_COLOR: 'UPDATE_COLOR',\n  COPY_TO_CLIPBOARD: 'COPY_TO_CLIPBOARD'\n};\n\nexport const COLOR_LIMIT = 5;\n\ninterface IAction {\n  type: string;\n  payload: string | any;\n}\n\nexport interface IColor {\n  color: string;\n  id: string;\n  copied?: boolean;\n}\n\nconst reducer = (state: IColor[], action: IAction) => {\n  switch (action.type) {\n    case TYPES.COPY_TO_CLIPBOARD:\n      return state.map(obj =>\n        obj.color === action.payload.color ? { ...obj, copied: true } : { ...obj, copied: false }\n      );\n    case TYPES.ADD_COLOR:\n      return [...state, { color: action.payload, id: uuidv4() }];\n    case TYPES.UPDATE_COLOR:\n      const newState = [...state].splice(1, COLOR_LIMIT);\n      return [\n        ...newState,\n        {\n          color: action.payload,\n          id: uuidv4()\n        }\n      ];\n    default:\n      return state;\n  }\n};\n\nconst initialState: IColor[] | any = [\n  {\n    color: '#00a8ff',\n    id: 'd80090b1-fa83-481c-aea5-7e9a0719b0c1',\n    copied: false\n  }\n];\nconst ColorContext = React.createContext(initialState);\nfunction ColorProvider(props: any) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return <ColorContext.Provider value={{ state, dispatch }}>{props.children}</ColorContext.Provider>;\n}\n\nexport { ColorContext, ColorProvider };\n","const isColor = (strColor: string) => {\n  const s = new Option().style;\n  s.color = strColor;\n  return s.color !== '';\n};\n\nexport default isColor;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  font-size: 15px;\n  cursor: pointer;\n  border: 2px solid ${(props: any) => (props.theme.primary === 'light' ? 'palevioletred' : '#b997db')};\n  color: ${(props: any) => (props.theme.primary === 'light' ? 'palevioletred' : '#b997db')};\n  padding: 0.5em 4em;\n  transition: 0.3s;\n\n  width: 50%;\n  &:focus {\n    outline: 0;\n  }\n  &:hover {\n    background: ${(props: any) => (props.theme.primary === 'light' ? 'white' : '#221d2b')};\n  }\n`;\n","import styled from 'styled-components';\nexport const Input = styled.input`\n  padding: 0.5em;\n  font-size: 15px; \n  margin: 0.5em 0;\n  color: black;\n  font-weight: 500;\n  background: whitesmoke;\n  border: 2px solid #d2d3cb;\n  border-radius: 3px;\n  width: 45%;\n  outline: none;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.div`\n  padding-left: 4px;\n  font-size: 13px;\n  color: ${(props: any) => (props.color ? props.color : 'slategrey')};\n  &:hover {\n    color: ${(props: any) => (props.theme.primary === 'light' ? 'palevioletred' : 'white')};\n  }\n`;\n","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\ninterface IProps {\n  children: React.ReactNode;\n}\n\nconst ReactTransitionFade: React.FC<IProps> = ({ children }) => {\n  return (\n    <ReactCSSTransitionGroup transitionName=\"fade\" transitionEnterTimeout={200} transitionLeaveTimeout={100}>\n      {children}\n    </ReactCSSTransitionGroup>\n  );\n};\n\nexport default ReactTransitionFade;\n","import React, { FormEvent, useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { ColorResult, HuePicker } from 'react-color';\nimport readableColor from 'polished/lib/color/readableColor';\n\nimport isColor from '../utils/isColor';\nimport { COLOR_LIMIT, ColorContext, IColor, TYPES } from '../Context/ColorContext';\nimport { Button } from './styledComponents/Button';\nimport { Input } from './styledComponents/Input';\nimport { Item } from './styledComponents/Item';\nimport ReactTransitionFade from './common/ReactTransitionFade';\n\ninterface IProps {}\n\nexport const ShowColor = styled.div`\n  background: ${(props: any) => (props.color ? props.color : 'white')};\n  width: 13%;\n  height: 100%;\n \n`;\n\nconst ShowColorLarge = styled(ShowColor)`\nalign-items: center;\n  color: ${(props: any) => (isColor(props.color) ? readableColor(props.color) : 'red')};\n  height: 50px;\n  padding: 30px 0;\n  line-height: 0;\n  position: relative;\n  width: 100%;\n  text-align: center;\n  margin: 10px 0;\n  font-weight: 600;\n  border-radius: 3px;\n`;\n\nexport const SliderWrapper = styled.div`\n  border: 1px solid #d2d3cb;\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  padding: 15px 0;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ColorListForm: React.FC<IProps> = () => {\n  const { state, dispatch } = useContext(ColorContext);\n  const [color, setColor] = useState('#00ff90');\n\n  const [isDuplicatedColor, setDuplicatedColor] = useState(false);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setColor(event.target.value);\n  };\n\n  const handleColorChange = (colorT: ColorResult): void => {\n    setColor(colorT.hex);\n  };\n\n  const handleSave = (e: FormEvent) => {\n    e.preventDefault();\n    const isColorExist = state.filter((checkColor: IColor) => checkColor.color === color);\n\n    if (isColorExist.length) {\n      setDuplicatedColor(true);\n      return;\n    } else {\n      setDuplicatedColor(false);\n    }\n\n    if (state.length >= COLOR_LIMIT) {\n      return dispatch({ type: TYPES.UPDATE_COLOR, payload: color });\n    }\n    dispatch({ type: TYPES.ADD_COLOR, payload: color });\n  };\n\n  return (\n    <>\n      <ShowColorLarge color={color}> {isColor(color) ? <>{color}</> : 'Invalid Color'}</ShowColorLarge>\n      <SliderWrapper>\n        <HuePicker color={color} onChange={handleColorChange} onChangeComplete={handleColorChange} />\n      </SliderWrapper>\n      <Form onSubmit={handleSave}>\n        <Input value={color} onChange={handleInputChange} />\n        <Button>Save</Button>\n      </Form>\n      <ReactTransitionFade>\n        {isDuplicatedColor && <Item color=\"deeppink\">The color is already on the list.</Item>}\n      </ReactTransitionFade>\n    </>\n  );\n};\n\nexport default ColorListForm;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\n\nimport { ColorContext, IColor, TYPES } from '../Context/ColorContext';\nimport { ShowColor } from './ColorListForm';\nimport ReactTransitionFade from './common/ReactTransitionFade';\nimport { Item } from './styledComponents/Item';\n\ninterface IProps {}\n\nconst ColorItem = styled.div`\n  margin: 0 15px;\n`;\n\nconst ColorListWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  border: 1px solid #d2d3cb;\n  margin-top: 4px;\n  height: 2.5rem;\n  cursor: pointer;\n  &:hover {\n    background: ${props => (props.theme.primary === 'light' ? 'whitesmoke' : '#14122b')};\n  }\n`;\n\nconst ColorListItem: React.FC<IProps> = () => {\n  const { state, dispatch } = useContext(ColorContext);\n  const getColor = (color: any) => {\n    dispatch({ type: TYPES.COPY_TO_CLIPBOARD, payload: { copied: true, color: color } });\n    // TODO: FIX for other browsers\n    navigator && navigator.clipboard && navigator.clipboard.writeText(color);\n  };\n\n  return (\n    <>\n      {(state as IColor[])\n        .slice(0)\n        .reverse()\n        .map(color => {\n          return (\n            <ColorListWrapper onClick={() => getColor(color.color)} key={color.id}>\n              <ShowColor role=\"color\" color={color.color} />\n              <ColorItem>{color.color}</ColorItem>\n              <ReactTransitionFade>{color.copied && <Item> Copied to Clipboard.</Item>}</ReactTransitionFade>\n            </ColorListWrapper>\n          );\n        })}\n    </>\n  );\n};\n\nexport default ColorListItem;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport ColorListItem from './ColorListItem';\nimport ColorListForm from './ColorListForm';\n\ninterface IProps {}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  max-width: 350px;\n  margin: 0 auto;\n`;\n\nconst ColorList: React.FC<IProps> = () => {\n  return (\n    <Wrapper>\n      <ColorListForm />\n      <ColorListItem />\n    </Wrapper>\n  );\n};\n\nexport default ColorList;\n","import React, { useReducer } from 'react';\n\nexport const TYPES = {\n  THEME: 'THEME'\n};\n\ninterface IAction {\n  type: string;\n  payload: string | any;\n}\n\nexport interface IColor {\n  color: string;\n  id: string;\n  copied?: boolean;\n}\n\nconst reducer = (state: IColor[], action: IAction) => {\n  switch (action.type) {\n    case TYPES.THEME:\n      return {\n        ...state,\n        dark: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState: IColor[] | any = {\n  dark: false\n};\nconst ThemeContext = React.createContext(initialState);\nfunction ThemeProvider(props: any) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return <ThemeContext.Provider value={{ state, dispatch }}>{props.children}</ThemeContext.Provider>;\n}\n\nexport { ThemeContext, ThemeProvider };\n","import React, { useEffect, useState } from 'react';\n\ninterface IProps {\n  handleChange: (value: boolean) => void;\n}\n\nconst Header: React.FC<IProps> = ({ handleChange }) => {\n  const [checked, setChecked] = useState(false);\n\n  useEffect(() => {\n    const currentTheme = localStorage.getItem('theme') ? localStorage.getItem('theme') : null;\n    setChecked(currentTheme === 'light' ? false : true);\n    checked ? handleChange(true) : handleChange(false);\n  }, [checked]);\n\n  const handleChange1 = () => {\n    setChecked(!checked);\n    checked ? handleChange(true) : handleChange(false);\n    localStorage.setItem('theme', checked ? 'light' : 'dark');\n  };\n\n  return (\n    <header className=\"header\">\n      <a className=\"link\" href=\"https://www.github.com/inPhoenix/colorPicker\" rel=\"noopener noreferrer\" target=\"_blank\">\n        GitHub\n      </a>\n      <div className=\"theme-switch-wrapper\">\n        <em>Light</em>\n        <label className=\"theme-switch\" htmlFor=\"checkbox\">\n          <input type=\"checkbox\" id=\"checkbox\" onChange={handleChange1} checked={checked} />\n          <div className=\"slider round\"></div>\n        </label>\n        <em>Dark</em>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useContext } from 'react';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport ColorList from './ColorList';\nimport { ThemeContext, TYPES } from '../Context/ThemeContext';\nimport Header from './Header';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: ${(props: any) => (props.theme.primary === 'light' ? 'grey' : 'white')};  \n    background: ${(props: any) => (props.theme.primary === 'light' ? 'white' : 'black')};\n    box-sizing: border-box;\n    font-family: \"American Typewriter\", Helvetica;\n  }`;\n\nconst darkTheme = {\n  primary: 'dark'\n};\n\nconst lightTheme = {\n  primary: 'light'\n};\n\nconst App: React.FC = () => {\n  const { state, dispatch } = useContext(ThemeContext);\n\n  const handleChange = (value: boolean) => {\n    dispatch({ type: TYPES.THEME, payload: value });\n  };\n\n  return (\n    <ThemeProvider theme={state.dark ? darkTheme : lightTheme}>\n      <Header handleChange={handleChange} />\n      <GlobalStyle whiteColor={state.dark} />\n      <ColorList />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport App from './components/App';\nimport { ColorProvider } from './Context/ColorContext';\nimport { ThemeProvider } from './Context/ThemeContext';\n\nReactDOM.render(\n  <ColorProvider>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </ColorProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}