{"version":3,"sources":["Context/Context.tsx","utils/isColor.tsx","components/styledComponents/Button.tsx","components/styledComponents/Input.tsx","components/styledComponents/Item.tsx","components/common/ReactTransitionFade.tsx","components/ColorListForm.tsx","components/ColorListItem.tsx","components/ColorList.tsx","components/App.tsx","index.tsx"],"names":["uuidv4","require","TYPES","reducer","state","action","type","map","obj","color","payload","copied","id","newState","splice","initialState","CounterContext","React","createContext","isColor","strColor","s","Option","style","Button","styled","button","Input","input","Item","div","props","ReactTransitionFade","children","transitionName","transitionEnterTimeout","transitionLeaveTimeout","ShowColor","ShowColorLarge","readableColor","SliderWrapper","Form","form","ColorListForm","useContext","dispatch","useState","setColor","isDuplicatedColor","setDuplicatedColor","handleColorChange","colorT","hex","onChange","onChangeComplete","onSubmit","e","preventDefault","filter","checkColor","length","value","event","target","ColorItem","ColorListWrapper","ColorListItem","slice","reverse","onClick","navigator","clipboard","writeText","getColor","key","role","Link","a","Wrapper","ColorList","href","rel","GlobalStyle","createGlobalStyle","whiteColor","darkTheme","primary","App","theme","ReactDOM","render","useReducer","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.8ae22be4.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\nconst uuidv4 = require('uuid/v4');\n\nexport const TYPES = {\n  ADD_COLOR: 'ADD_COLOR',\n  UPDATE_COLOR: 'UPDATE_COLOR',\n  COPY_TO_CLIPBOARD: 'COPY_TO_CLIPBOARD'\n};\n\nexport const COLOR_LIMIT = 5;\n\ninterface IAction {\n  type: string;\n  payload: string | any;\n}\n\nexport interface IColor {\n  color: string;\n  id: string;\n  copied?: boolean;\n}\n\nconst reducer = (state: IColor[], action: IAction) => {\n  switch (action.type) {\n    case TYPES.COPY_TO_CLIPBOARD:\n      return state.map(obj =>\n        obj.color === action.payload.color ? { ...obj, copied: true } : { ...obj, copied: false }\n      );\n    case TYPES.ADD_COLOR:\n      return [...state, { color: action.payload, id: uuidv4() }];\n    case TYPES.UPDATE_COLOR:\n      const newState = [...state].splice(1, COLOR_LIMIT);\n      return [\n        ...newState,\n        {\n          color: action.payload,\n          id: uuidv4()\n        }\n      ];\n    default:\n      return state;\n  }\n};\n\nconst initialState: IColor[] | any = [\n  {\n    color: '#00a8ff',\n    id: 'd80090b1-fa83-481c-aea5-7e9a0719b0c1',\n    copied: false\n  }\n];\nconst CounterContext = React.createContext(initialState);\nfunction CounterProvider(props: any) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return <CounterContext.Provider value={{ state, dispatch }}>{props.children}</CounterContext.Provider>;\n}\n\nexport { CounterContext, CounterProvider };\n","const isColor = (strColor: string) => {\n  const s = new Option().style;\n  s.color = strColor;\n  return s.color !== '';\n};\n\nexport default isColor;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  font-size: 15px;\n  cursor: pointer;\n  border: 2px solid palevioletred;\n  color: palevioletred;\n  padding: 0.5em 4em;\n  transition: 0.3s;\n\n  width: 50%;\n  &:focus {\n    outline:0;\n  }\n  &:hover {\n    background: antiquewhite;\n  }\n`;\n","import styled from 'styled-components';\nexport const Input = styled.input`\n  padding: 0.5em;\n  font-size: 15px; \n  margin: 0.5em 0;\n  color: black;\n  font-weight: 500;\n  background: whitesmoke;\n  border: 2px solid #d2d3cb;\n  border-radius: 3px;\n  width: 45%;\n  outline: none;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.div`\n  padding-left: 4px;\n  font-size: 13px;\n  color: ${(props: any) => (props.color ? props.color : 'slategrey')};\n  &:hover {\n    color: #435790;\n  }\n`;\n","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\ninterface IProps {\n  children: React.ReactNode;\n}\n\nconst ReactTransitionFade: React.FC<IProps> = ({ children }) => {\n  return (\n    <ReactCSSTransitionGroup transitionName=\"fade\" transitionEnterTimeout={200} transitionLeaveTimeout={100}>\n      {children}\n    </ReactCSSTransitionGroup>\n  );\n};\n\nexport default ReactTransitionFade;\n","import React, { FormEvent, useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { ColorResult, HuePicker } from 'react-color';\nimport readableColor from 'polished/lib/color/readableColor';\n\nimport isColor from '../utils/isColor';\nimport { COLOR_LIMIT, CounterContext, IColor, TYPES } from '../Context/Context';\nimport { Button } from './styledComponents/Button';\nimport { Input } from './styledComponents/Input';\nimport { Item } from './styledComponents/Item';\nimport ReactTransitionFade from './common/ReactTransitionFade';\n\ninterface IProps {}\n\nexport const ShowColor = styled.div`\n  background: ${(props: any) => (props.color ? props.color : 'white')};\n  width: 13%;\n  height: 12px;\n  padding-top: 30px;\n`;\n\nconst ShowColorLarge = styled(ShowColor)`\n  color: ${(props: any) => (isColor(props.color) ? readableColor(props.color) : 'red')};\n  height: 50px;\n  position: relative;\n  width: 100%;\n  text-align: center;\n  margin: 10px 0;\n  font-weight: 600;\n  border-radius: 3px;\n`;\n\nexport const SliderWrapper = styled.div`\n  border: 1px solid #d2d3cb;\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  padding: 15px 0;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ColorListForm: React.FC<IProps> = () => {\n  const { state, dispatch } = useContext(CounterContext);\n  const [color, setColor] = useState('#00ff90');\n\n  const [isDuplicatedColor, setDuplicatedColor] = useState(false);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setColor(event.target.value);\n  };\n\n  const handleColorChange = (colorT: ColorResult): void => {\n    setColor(colorT.hex);\n  };\n\n  const handleSave = (e: FormEvent) => {\n    e.preventDefault();\n    const isColorExist = state.filter((checkColor: IColor) => checkColor.color === color);\n\n    if (isColorExist.length) {\n      setDuplicatedColor(true);\n      return;\n    } else {\n      setDuplicatedColor(false);\n    }\n\n    if (state.length >= COLOR_LIMIT) {\n      return dispatch({ type: TYPES.UPDATE_COLOR, payload: color });\n    }\n    dispatch({ type: TYPES.ADD_COLOR, payload: color });\n  };\n\n  return (\n    <>\n      <ShowColorLarge color={color}> {isColor(color) ? <>{color}</> : 'Invalid Color'}</ShowColorLarge>\n      <SliderWrapper>\n        <HuePicker color={color} onChange={handleColorChange} onChangeComplete={handleColorChange} />\n      </SliderWrapper>\n      <Form onSubmit={handleSave}>\n        <Input value={color} onChange={handleInputChange} />\n        <Button>Save</Button>\n      </Form>\n      <ReactTransitionFade>\n        {isDuplicatedColor && <Item color=\"brown\">The color is already on the list.</Item>}\n      </ReactTransitionFade>\n    </>\n  );\n};\n\nexport default ColorListForm;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\n\nimport { CounterContext, IColor, TYPES } from '../Context/Context';\nimport { ShowColor } from './ColorListForm';\nimport ReactTransitionFade from './common/ReactTransitionFade';\nimport { Item } from './styledComponents/Item';\n\ninterface IProps {}\n\nconst ColorItem = styled.div`\n  margin: 0 15px;\n`;\n\nconst ColorListWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  border: 1px solid #d2d3cb;\n  margin-top: 4px;\n  height: 2.5rem;\n  cursor: pointer;\n  &:hover {\n    background: whitesmoke;\n  }\n`;\n\nconst ColorListItem: React.FC<IProps> = () => {\n  const { state, dispatch } = useContext(CounterContext);\n  const getColor = (color: any) => {\n    dispatch({ type: TYPES.COPY_TO_CLIPBOARD, payload: { copied: true, color: color } });\n    // TODO: FIX for other browsers\n    navigator && navigator.clipboard && navigator.clipboard.writeText(color);\n  };\n\n  return (\n    <>\n      {(state as IColor[])\n        .slice(0)\n        .reverse()\n        .map(color => {\n          return (\n            <ColorListWrapper onClick={() => getColor(color.color)} key={color.id}>\n              <ShowColor role=\"color\" color={color.color} />\n              <ColorItem>{color.color}</ColorItem>\n              <ReactTransitionFade>{color.copied && <Item> Copied to Clipboard.</Item>}</ReactTransitionFade>\n            </ColorListWrapper>\n          );\n        })}\n    </>\n  );\n};\n\nexport default ColorListItem;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport ColorListItem from './ColorListItem';\nimport ColorListForm from './ColorListForm';\n\ninterface IProps {}\n\nconst Link = styled.a`\n  display: flex;\n  align-items: center;\n  padding: 25px 3px;\n  color: palevioletred;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  max-width: 350px;\n  margin: 0 auto;\n`;\n\nconst ColorList: React.FC<IProps> = () => {\n  return (\n    <Wrapper>\n      <ColorListForm />\n      <ColorListItem />\n      <Link href=\"https://www.github.com/inPhoenix/colorPicker\" rel=\"noopener noreferrer\" target=\"_blank\">\n        GitHub Code\n      </Link>\n    </Wrapper>\n  );\n};\n\nexport default ColorList;\n","import React from 'react';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport ColorList from './ColorList';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: ${(props: any) => (props.whiteColor ? 'white' : 'black')};\n    background: ${(props: any) => (props.whiteColor ? 'black' : 'azure')};\n    box-sizing: border-box;\n    color: dimgrey;\n    font-family: \"American Typewriter\", Helvetica;\n  }`;\n\nconst darkTheme = {\n  primary: 'black'\n};\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <GlobalStyle whiteColor={false} />\n      <ColorList />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss'\n\nimport App from './components/App';\nimport { CounterProvider } from './Context/Context';\n\nReactDOM.render(\n  <CounterProvider>\n    <App />\n  </CounterProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}